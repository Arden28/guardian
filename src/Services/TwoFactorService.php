<?php

namespace Arden28\Guardian\Services;

use Arden28\Guardian\Models\TwoFactorSetting;
use Arden28\Guardian\Notifications\TwoFactorEmail;
use Arden28\Guardian\Notifications\TwoFactorSms;
use OTPHP\TOTP;
use Illuminate\Support\Facades\Cache;
use Twilio\Rest\Client;

class TwoFactorService
{
    /**
     * Generate a 2FA code and store it in cache.
     *
     * @param string $userId
     * @return string
     */
    public function generateCode($userId)
    {
        $code = str_pad(rand(0, 999999), config('guardian.two_factor.code_length', 6), '0', STR_PAD_LEFT);
        Cache::put("2fa_code_{$userId}", $code, config('guardian.two_factor.code_expiry', 300));
        return $code;
    }

    /**
     * Send a 2FA code to the user.
     *
     * @param mixed $user
     * @param string $method
     * @return void
     * @throws \Exception
     */
    public function sendCode($user, $method)
    {
        $code = $this->generateCode($user->id);

        if ($method === 'email') {
            $user->notify(new TwoFactorEmail($code));
        } elseif ($method === 'sms') {
            $setting = $user->twoFactorSettings;
            if (!$setting || !$setting->phone_number) {
                throw new \Exception('Phone number not set for SMS 2FA');
            }
            $this->sendSms($setting->phone_number, $code);
        } elseif ($method === 'totp') {
            // TOTP codes are generated by the client app; no need to send
            return;
        } else {
            throw new \Exception('Invalid 2FA method');
        }
    }

    /**
     * Send an SMS 2FA code using Twilio.
     *
     * @param string $phoneNumber
     * @param string $code
     * @return void
     */
    protected function sendSms($phoneNumber, $code)
    {
        $twilio = new Client(
            config('guardian.two_factor.twilio.account_sid'),
            config('guardian.two_factor.twilio.auth_token')
        );

        $twilio->messages->create($phoneNumber, [
            'from' => config('guardian.two_factor.twilio.from'),
            'body' => "Your 2FA code is: {$code}",
        ]);
    }

    /**
     * Verify a 2FA code.
     *
     * @param mixed $user
     * @param string $method
     * @param string $code
     * @return bool
     */
    public function verifyCode($user, $method, $code)
    {
        if ($method === 'totp') {
            $setting = $user->twoFactorSettings;
            if (!$setting || !$setting->secret) {
                return false;
            }
            $totp = TOTP::create($setting->secret);
            $totp->setIssuer(config('guardian.two_factor.totp.issuer', 'Guardian'));
            $totp->setLabel($user->email);
            return $totp->verify($code);
        }

        $cachedCode = Cache::get("2fa_code_{$user->id}");
        if ($cachedCode && $cachedCode === $code) {
            Cache::forget("2fa_code_{$user->id}");
            $user->twoFactorSettings()->update(['last_verified_at' => now()]);
            return true;
        }

        return false;
    }

    /**
     * Enable 2FA for a user.
     *
     * @param mixed $user
     * @param string $method
     * @param string|null $phoneNumber
     * @return array
     */
    public function enable($user, $method, $phoneNumber = null)
    {
        if (!in_array($method, config('guardian.two_factor.methods', []))) {
            throw new \Exception('Invalid 2FA method');
        }

        $data = [
            'method' => $method,
            'is_enabled' => true,
        ];

        if ($method === 'sms' && $phoneNumber) {
            $data['phone_number'] = $phoneNumber;
        } elseif ($method === 'totp') {
            $totp = TOTP::create();
            $totp->setIssuer(config('guardian.two_factor.totp.issuer', 'Guardian'));
            $totp->setLabel($user->email);
            $data['secret'] = $totp->getSecret();
            $data['qr_code'] = $totp->getProvisioningUri();
        }

        $user->twoFactorSettings()->updateOrCreate(
            ['user_id' => $user->id],
            $data
        );

        return $data;
    }

    /**
     * Disable 2FA for a user.
     *
     * @param mixed $user
     * @return void
     */
    public function disable($user)
    {
        $user->twoFactorSettings()->update([
            'is_enabled' => false,
            'method' => null,
            'secret' => null,
            'phone_number' => null,
        ]);
    }
}